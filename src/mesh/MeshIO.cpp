#include "FastFem/mesh/MeshIO.hpp"
#include "FastFem/types/CommonTypes.hpp"

namespace fastfem{
namespace mesh{

using namespace fastfem::dof;
using namespace fastfem::linalg;

using local_vertex_index   = fastfem::types::local_vertex_index;
using global_vertex_index  = fastfem::types::global_vertex_index;

template<unsigned int dim, unsigned int spacedim>
void MeshIO<dim,spacedim>::save_vtu(const std::string &filename) const{
    std::ofstream file;
    file.open(filename);
    file << "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\">\n";
    file << "<UnstructuredGrid>\n";
    file << "<Piece NumberOfPoints=\"" << mesh.vtx_count() << "\" NumberOfCells=\"" << mesh.elem_count() << "\">\n";
    file << "<Points>\n";
    file << "<DataArray type=\"Float64\" NumberOfComponents=\"" << 3 << "\" format=\"ascii\">\n"; 
    for (auto v = mesh.vtx_begin(); v != mesh.vtx_end(); ++v) {
        for(local_vertex_index i = 0; i < spacedim; i++)
            file << v->point.coords[i] << " ";
        if (spacedim < 3) {
            for(local_vertex_index i = spacedim; i < 3; i++)
                file << "0 ";
        }
        file << "\n";
    }
    file << "</DataArray>\n";
    file << "</Points>\n";
    file << "<Cells>\n";
    file << "<DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n";
    for (auto e = mesh.elem_begin(); e != mesh.elem_end(); ++e) {
        for (local_vertex_index i = 0; i < e->vertex_count(); ++i) {
            file << e->get_vertex(i) << " ";
        }
        file << "\n";
    }
    file << "</DataArray>\n";
    file << "<DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n";
    global_vertex_index offset = 0;
    for (auto e = mesh.elem_begin(); e != mesh.elem_end(); ++e) {
        offset += (global_vertex_index) e->vertex_count();
        file << offset << "\n";
    }
    file << "</DataArray>\n";
    file << "<DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n";
    for (auto e = mesh.elem_begin(); e != mesh.elem_end(); ++e) {
        file << "5\n"; // 5 corresponds to VTK_TRIANGLE in VTK file format
    }
    file << "</DataArray>\n";
    file << "</Cells>\n";
    file << "</Piece>\n";
    file << "</UnstructuredGrid>\n";
    file << "</VTKFile>\n";
    file.close();
}

template<unsigned int dim, unsigned int spacedim>
void MeshIO<dim,spacedim>::save_msh(const std::string &filename) const{
    std::ofstream file;
    file.open(filename);
    file << "$MeshFormat\n";
    file << "2.2 0 8\n";
    file << "$EndMeshFormat\n";
    file << "$Nodes\n";
    file << mesh.vtx_count() << "\n";
    global_vertex_index id = 0;
    for (auto v = mesh.vtx_begin(); v != mesh.vtx_end(); ++v) {
        file << id++ << " ";
        for(local_vertex_index i = 0; i < spacedim; i++)
            file << v->point.coords[i] << " ";
        if (spacedim < 3) {
            for(local_vertex_index i = spacedim; i < 3; i++)
                file << "0 ";
        }
        file << "\n";
    }
    file << "$EndNodes\n";
    file << "$Elements\n";
    file << mesh.elem_count() << "\n";
    id=0;
    for (auto e = mesh.elem_begin(); e != mesh.elem_end(); ++e) {
        file << id++ << " ";
        file << "2 "; // 2 corresponds to VTK_TRIANGLE in Gmsh file format
        file << "3 "; // 3 corresponds to number of tags
        file << "1 1 1 "; // tags
        for (global_vertex_index i = 0; i < e->vertex_count(); ++i) {
            file << e->get_vertex(i) << " ";
        }
        file << "\n";
    }
    file << "$EndElements\n";
    file.close();
}


template<unsigned int dim, unsigned int spacedim>
DataIO<dim,spacedim>::DataIO(Mesh<dim, spacedim> &mesh, DoFHandler<dim, spacedim> &dof_handler, Vector &solution) : mesh(mesh),
dof_handler(dof_handler), solution(solution){};


template<unsigned int dim, unsigned int spacedim>
void DataIO<dim,spacedim>::save_vtx(const std::string &filename) const{
    std::ofstream file;
    file.open(filename);
    file << "# vtk DataFile Version 3.0\n";
    file << "# This file was generated by FastFem\n";
    file << "ASCII\n";
    file << "DATASET UNSTRUCTURED_GRID\n\n";

    file << "POINTS " << mesh.vtx_count() << " double\n";

    for (auto v = mesh.vtx_begin(); v != mesh.vtx_end(); ++v) {
        for(local_vertex_index i = 0; i < spacedim; i++)
            file << v->point.coords[i] << " ";
        if (spacedim < 3) {
            for(local_vertex_index i = spacedim; i < 3; i++)
                file << "0 ";
        }
        file << "\n";
    }

    file << "\n";
    file << "CELLS " << mesh.elem_count() << " " << mesh.elem_count()*4 << "\n";

    for (auto e = mesh.elem_begin(); e != mesh.elem_end(); ++e) {
        file << e->vertex_count() << "\t";
        for (global_vertex_index i = 0; i < e->vertex_count(); ++i) {
            file << e->get_vertex(i) << "\t";
        }
        file << "\n";
    }

    file << "\n";

    file << "CELL_TYPES " << mesh.elem_count() << "\n";

    for (auto e = mesh.elem_begin(); e != mesh.elem_end(); ++e) {
        file << "5 "; // 5 corresponds to VTK_TRIANGLE in VTK file format
    }

    file << "\n";

    file << "POINT_DATA " << mesh.vtx_count() << "\n";
    file << "SCALARS solution double 1\n";
    file << "LOOKUP_TABLE default\n";
    
    for(global_vertex_index i = 0; i < mesh.vtx_count(); i++){
        // make the global index of the DoF
        fastfem::types::global_dof_index dof = dof_handler.get_dof_on_vertex(i)[0];
        file << solution[dof] << " ";
    }
}



// Explicit instantiation
template class MeshIO<1,1>;
template class MeshIO<1,2>;
template class MeshIO<1,3>;
template class MeshIO<2,2>;
template class MeshIO<2,3>;
template class MeshIO<3,3>;


template class DataIO<1,1>;
template class DataIO<1,2>;
template class DataIO<1,3>;
template class DataIO<2,2>;
template class DataIO<2,3>;
template class DataIO<3,3>;


} // namespace mesh
} // namespace fastfem